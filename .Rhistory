library(reticulate)
py$x
readr::read_csv("../data/raw/train.csv")
library(tidyverse)
library(sparklyr)
config = spark_config()
config$`sparklyr.shell.driver-memory` <- "8G"
config$spark.memory.fraction <- 0.9
sc <- spark_connect(master = "local",config = config)
library(arrow)
train = readr::read_csv("../data/raw/train.csv")
test = readr::read_csv("../data/raw/test.csv")
train_tbl = spark_read_csv(sc, name = "cover_type_train", path = "../data/raw/train.csv")
test_tbl = spark_read_csv(sc, name = "cover_type_test", path = "../data/raw/test.csv")
train
train_tbl %>% names
train_tbl %>% head %>% collect %>% names
library(sparkxgb)
train$Cover_Type %>% unique()
vector_assembler <- ft_vector_assembler(
sc,
input_cols = setdiff(colnames(train_tbl), "Cover_Type"),
output_col = "features"
)
normalizer <- ft_normalizer(
sc,
input_cols = "features",
output_col = "features",
uid = "transf_normalizer_cover_type"
)
xgb = xgboost_classifier(sc,objective = "softmax", num_class = 7)
xgb = xgboost_classifier(sc,objective = "multi:softmax", num_class = 7)
pipeline <- ml_pipeline(sc) %>%
ft_vector_assembler(
sc,
input_cols = setdiff(colnames(train_tbl), "Cover_Type"),
output_col = "features"
) %>%
ft_normalizer(
sc,
input_cols = "features",
output_col = "features",
uid = "transf_normalizer_cover_type"
) %>%
xgboost_classifier(sc,objective = "multi:softmax", num_class = 7)
pipeline <- ml_pipeline(sc) %>%
ft_vector_assembler(
sc,
input_cols = setdiff(colnames(train_tbl), "Cover_Type"),
output_col = "features",
uid = "assembler"
) %>%
ft_normalizer(
sc,
input_cols = "features",
output_col = "features",
uid = "transf_normalizer_cover_type"
) %>%
xgboost_classifier(sc,objective = "multi:softmax", num_class = 7,uid = "xgb")
pipeline <- ml_pipeline(sc) %>%
ft_vector_assembler(
sc,
input_cols = setdiff(colnames(train_tbl), "Cover_Type"),
output_col = "features",
uid = "assembler"
) %>%
ft_normalizer(
sc,
input_cols = "features",
output_col = "features",
uid = "transf_normalizer_cover_type"
)
step_1 <-
train_tbl %>%
ft_vector_assembler(
input_cols = setdiff(colnames(train_tbl), "Cover_Type"),
output_col = "features",
uid = "assembler"
)
step_1
step_1%>%
ft_normalizer(
input_cols = "features",
output_col = "features",
uid = "transf_normalizer_cover_type"
)
step_1
step_1 %>%
ft_normalizer(
input_cols = "features",
output_col = "features_norm",
uid = "transf_normalizer_cover_type"
)
setdiff(colnames(train_tbl), "Cover_Type")
ft_vector_assembler(train_tbl, input_cols=setdiff(colnames(train_tbl), "Cover_Type"), output_col="features") %>%
ft_normalizer(input.col = "features", output.col = "features_norm")
pipeline <- ml_pipeline(sc) %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
ml_gbt_regressor(label_col = "Cover_Type")
pipeline_model <- ml_fit(pipeline, train_tbl)
pipeline_model
pipeline_model %>% ml_predict(test_tbl)
pipeline_xgb <-
ml_pipeline(sc) %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
xgboost_classifier(objective = "multi:softmax", num_class = 7,uid = "xgb")
label_encoder <-
train_tbl %>%
mutate(Cover_Type = case_when(
Cover_Type == 1 ~ "cover_type_1",
Cover_Type == 2 ~ "cover_type_2",
Cover_Type == 3 ~ "cover_type_3",
Cover_Type == 4 ~ "cover_type_4",
Cover_Type == 5 ~ "cover_type_5",
Cover_Type == 6 ~ "cover_type_6",
Cover_Type == 7 ~ "cover_type_7",
))
label_encoder <-
train_tbl %>%
mutate(Cover_Type = case_when(
Cover_Type == 1 ~ "cover_type_1",
Cover_Type == 2 ~ "cover_type_2",
Cover_Type == 3 ~ "cover_type_3",
Cover_Type == 4 ~ "cover_type_4",
Cover_Type == 5 ~ "cover_type_5",
Cover_Type == 6 ~ "cover_type_6",
Cover_Type == 7 ~ "cover_type_7"
))
pipeline_classification <- ml_pipeline(sc) %>%
ft_dplyr_transformer(label_encoder) %>%
ft_string_indexer("Cover_Type", "label") %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
ml_gbt_regressor(label_col = "Cover_Type")
classification_pipeline_model <- ml_fit(pipeline, train_tbl)
ml_transform(test_tbl) %>%
glimpse()
classification_pipeline_model %>%
ml_transform(test_tbl) %>%
glimpse()
labels <- classification_pipeline_model %>%
ml_stage("string_indexer") %>%
ml_labels()
pipeline_classification <- ml_pipeline(sc) %>%
ft_dplyr_transformer(label_encoder) %>%
ft_string_indexer("Cover_Type", "label",uid = "string_indexer") %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
ml_gbt_regressor(label_col = "Cover_Type")
classification_pipeline_model <- ml_fit(pipeline, train_tbl)
pipeline_classification <- ml_pipeline(sc) %>%
ft_dplyr_transformer(label_encoder) %>%
ft_string_indexer("Cover_Type", "label",uid = "string_indexer") %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
ml_gbt_classifier(label_col = "Cover_Type")
classification_pipeline_model <- ml_fit(pipeline, train_tbl)
classification_pipeline_model %>%
ml_transform(test_tbl) %>%
glimpse()
labels <- classification_pipeline_model %>%
ml_stage("string_indexer") %>%
ml_labels()
classification_pipeline_model
labels <- classification_pipeline_model %>%
ml_stage("string_indexer") %>%
ml_labels()
pipeline_classification <- ml_pipeline(sc) %>%
ft_dplyr_transformer(label_encoder) %>%
ft_string_indexer("Cover_Type", "label",uid = "string_indexer") %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
ml_gbt_classifier(label_col = "Cover_Type")
classification_pipeline_model <- ml_fit(pipeline_classification, train_tbl)
pipeline_classification <- ml_pipeline(sc) %>%
ft_dplyr_transformer(label_encoder) %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
ft_string_indexer("Cover_Type", "label",uid = "string_indexer") %>%
ml_gbt_classifier(label_col = "Cover_Type")
classification_pipeline_model <- ml_fit(pipeline_classification, train_tbl)
pipeline_classification <- ml_pipeline(sc) %>%
ft_dplyr_transformer(label_encoder) %>%
ft_vector_assembler(setdiff(colnames(train_tbl), "Cover_Type"), "features") %>%
ft_string_indexer("Cover_Type", "label",uid = "string_indexer") %>%
ml_gbt_classifier(label_col = "label")
classification_pipeline_model <- ml_fit(pipeline_classification, train_tbl)
xgb_model <- xgboost_classifier(train_tbl,
Cover_Type ~ .,
num_class = 7,
# num_round = 50,
# max_depth = 4
)
train_tbl_enc <-
train_tbl %>%
mutate(Cover_Type = case_when(
Cover_Type == 1 ~ "cover_type_1",
Cover_Type == 2 ~ "cover_type_2",
Cover_Type == 3 ~ "cover_type_3",
Cover_Type == 4 ~ "cover_type_4",
Cover_Type == 5 ~ "cover_type_5",
Cover_Type == 6 ~ "cover_type_6",
Cover_Type == 7 ~ "cover_type_7"
))
test_tbl_enc <-
test_tbl %>%
mutate(Cover_Type = case_when(
Cover_Type == 1 ~ "cover_type_1",
Cover_Type == 2 ~ "cover_type_2",
Cover_Type == 3 ~ "cover_type_3",
Cover_Type == 4 ~ "cover_type_4",
Cover_Type == 5 ~ "cover_type_5",
Cover_Type == 6 ~ "cover_type_6",
Cover_Type == 7 ~ "cover_type_7"
))
xgb_model <- xgboost_classifier(train_tbl_enc,
Cover_Type ~ .,
num_class = 7,
# num_round = 50,
# max_depth = 4
)
train_tbl_enc
xgb_model <- xgboost_classifier(train_tbl_enc,
Cover_Type ~ .,
# num_class = 7,
# num_round = 50,
# max_depth = 4
)
train_tbl_enc
sparklyr::spark_disconnect(sc)
library(tidyverse)
library(sparklyr)
library(arrow)
config = spark_config()
config$`sparklyr.shell.driver-memory` <- "8G"
config$spark.memory.fraction <- 0.9
sc <- spark_connect(master = "local",config = config)
train_tbl = spark_read_csv(sc, name = "cover_type_train", path = "../data/raw/train.csv")
train_tbl = spark_read_csv(sc, name = "cover_type_train", path = "../data/raw/train.csv")
test_tbl = spark_read_csv(sc, name = "cover_type_test", path = "../data/raw/test.csv")
pipeline <- ml_pipeline(sc) %>%
ft_dplyr_transformer(
train_tbl %>%
mutate(Cover_Type = case_when(
Cover_Type == 1 ~ "cover_type_1",
Cover_Type == 2 ~ "cover_type_2",
Cover_Type == 3 ~ "cover_type_3",
Cover_Type == 4 ~ "cover_type_4",
Cover_Type == 5 ~ "cover_type_5",
Cover_Type == 6 ~ "cover_type_6",
Cover_Type == 7 ~ "cover_type_7"
)) %>%
select(-Id)
) %>%
ft_string_indexer("Cover_Type", "Cover_Type")
data_pipeline_prepped <- ml_fit(train_tbl)
data_pipeline <- ml_pipeline(sc) %>%
ft_dplyr_transformer(
train_tbl %>%
mutate(Cover_Type = case_when(
Cover_Type == 1 ~ "cover_type_1",
Cover_Type == 2 ~ "cover_type_2",
Cover_Type == 3 ~ "cover_type_3",
Cover_Type == 4 ~ "cover_type_4",
Cover_Type == 5 ~ "cover_type_5",
Cover_Type == 6 ~ "cover_type_6",
Cover_Type == 7 ~ "cover_type_7"
)) %>%
select(-Id)
) %>%
ft_string_indexer("Cover_Type", "Cover_Type")
train_in <-
data_pipeline %>%
ml_transform(train_tbl)
install.packages("rsparkling")
data_pipeline <- ml_pipeline(sc) %>%
ft_dplyr_transformer(
train_tbl %>%
mutate(Cover_Type = case_when(
Cover_Type == 1 ~ "cover_type_1",
Cover_Type == 2 ~ "cover_type_2",
Cover_Type == 3 ~ "cover_type_3",
Cover_Type == 4 ~ "cover_type_4",
Cover_Type == 5 ~ "cover_type_5",
Cover_Type == 6 ~ "cover_type_6",
Cover_Type == 7 ~ "cover_type_7"
)) %>%
select(-Id)
) %>%
# ft_string_indexer("Cover_Type", "Cover_Type")
as_h2o_frame()
library(rsparkling)
install.packages("rsparkling")
